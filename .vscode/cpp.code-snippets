{
	"hpp": {
		"prefix": "hpp",
		"scope": "cpp",
		"description": "Header file with namespace",
		"body": [
			"#pragma once",
			"",
			"namespace lf {",
			"",
			"$0",
			"",
			"}"
		]
	},
	"cpp": {
		"prefix": "cpp",
		"scope": "cpp",
		"description": "CPP with namespace",
		"body": [
			"#include \"${RELATIVE_FILEPATH/src\\/(.*)\\.cpp/$1.hpp/}\"",
			"",
			"namespace lf {",
			"",
			"$0",
			"",
			"}"
		]
	},
	"testfile": {
		"prefix": "testfile",
		"scope": "cpp",
		"description": "Catch2 test file",
		"body": [
			"#include <catch2/catch_test_macros.hpp>",
			"",
			"#include \"${RELATIVE_FILEPATH/test\\/(.*)\\.cpp/$1.hpp/}\"",
			"",
			"using namespace lf;",
			"",
			"TEST_CASE(\"${1:test}\", \"[${TM_FILENAME_BASE}]\") {",
			"    $0",
			"}"
		]
	},
	"test": {
		"prefix": "test",
		"scope": "cpp",
		"description": "Catch2 TEST_CASE",
		"body": [
			"TEST_CASE(\"${1:test}\", \"[${TM_FILENAME_BASE}]\") {",
			"    $0",
			"}"
		]
	}
	// Place your lf workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}